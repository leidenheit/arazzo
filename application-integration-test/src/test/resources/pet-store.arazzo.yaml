arazzo: 1.0.0
info:
  title: PetStore - Place an order
  version: 0.0.1
  description: >-
    Illustrates a workflow whereby a client 
    a) lookup the inventory of the pet store, 
    b) order a pet in the pet store
    c) reads the order placed in previous step
    d) deletes the order from previous step
    e) tries to read an non-existing order
sourceDescriptions:
  - name: petStoreApi
    url: ./src/test/resources/pet-store.openapi.yaml
    type: openapi
  - name: cookieApi
    url: http://localhost:8080/openapi.yaml
    type: openapi
    x-bernd: "Bernd"
workflows:
  - workflowId: fetch-inventory-and-apply-pet-order
    dependsOn:
      - retrieve-cookie-and-eat-cookie
    summary: Fetches the inventory of the pet store.
    description: >-
      lorem ipsum description of fetching inventory and placing order
    inputs:
      $ref: '#/components/inputs/pets'
    steps:
      - stepId: fetch-inventory
        operationId: $sourceDescriptions.petStoreApi.getInventory
        successCriteria:
          - condition: $statusCode == 200
        outputs:
          availableCount: $response.body.available
      - stepId: place-pet-order
        description: Places a pet order.
        operationId: $sourceDescriptions.petStoreApi.placeOrder
        requestBody:
          contentType: application/json
          payload: |
            {
              "id": 4,
              "petId": "{$inputs.petId}",
              "shipDate": "2024-10-13T12:02:49.892Z",
              "status": "placed",
              "complete": true
            }
          replacements:
            - target: '$.status'
              value: "manipulatedByDev"
            - target: '$.id'
              value: $inputs.petId
        successCriteria:
          - condition: $statusCode == 200
          - condition: $response.body != null
          - condition: '#/petId == 4'
            context: $response.body
            type: jsonpath
            version: draft-goessner-dispatch-jsonpath-00
          - condition: '#/status == manipulatedByDev'
            context: $response.body
            type: jsonpath
            version: draft-goessner-dispatch-jsonpath-00
        outputs:
          orderId: $response.body.id
          orderStatus: $response.body.status
      - stepId: lookup-placed-order
        description: Lookup of the previously placed pet order.
        operationPath: '{$sourceDescriptions.petStoreApi.url}#/paths/~1store~1order~1{orderId}/get'
        parameters:
          - reference: $components.parameters.orderId
#            value: '4711' # sad path
        successCriteria:
          # assertions to determine step was successful
          - condition: $statusCode == 200
          - context: $response.body
            condition: '#/petId == 4'
            type: jsonpath
            version: draft-goessner-dispatch-jsonpath-00
#        onSuccess:
#          - name: leaveWorkflow2
#            type: end
#            criteria:
#              # assertions to determine if this action should be executed
#              - condition: $response.body != null
#              - condition: '#/petId == 4'
#                context: $response.body
#                type: jsonpath
#                version: draft-goessner-dispatch-jsonpath-00
        onFailure:
          - name: retryRetrievePlacedOrderByIdSixTimes
            type: retry
            retryAfter: 5 # seconds
            retryLimit: 6
            criteria:
              # assertions to determine if this action should be executed
              - condition: $statusCode == 404
      - stepId: delete-placed-order
        description: Deletion of the previously placed pet order.
        operationPath: '{$sourceDescriptions.petStoreApi.url}#/paths/~1store~1order~1{orderId}/delete'
        parameters:
          - reference: $components.parameters.orderId
#            value: '4711' # sad path
        successCriteria:
          # assertions to determine step was successful
          - condition: $statusCode == 200
          - context: $response.body
            condition: '#/message == 4'
            type: jsonpath
            version: draft-goessner-dispatch-jsonpath-00
          - context: $response.body
            condition: '#/code == 200'
            type: jsonpath
            version: draft-goessner-dispatch-jsonpath-00
        onFailure:
          - name: fetchInventoryAgain
            type: goto
            stepId: fetch-inventory
            criteria:
              # assertions to determine if this action should be executed
              - condition: '#/type == unknown'
                context: $response.body
                type: jsonpath
                version: draft-goessner-dispatch-jsonpath-00
      - stepId: lookup-non-existing-order
        description: Lookup of a non-existing pet order.
        operationPath: '{$sourceDescriptions.petStoreApi.url}#/paths/~1store~1order~1{orderId}/get'
        parameters:
          - reference: $components.parameters.orderId
        successCriteria:
          # assertions to determine step was successful
          - condition: $statusCode == 404
        onSuccess:
          - name: leaveWorkflow
            type: end
            criteria:
              # assertions to determine if this action should be executed
              - condition: $response.body != null
              - condition: '#/message == Order not found'
                context: $response.body
                type: jsonpath
                version: draft-goessner-dispatch-jsonpath-00
    outputs:
      petsAvailableInStore: $steps.fetch-inventory.outputs.availableCount
      placedOrderId: $steps.place-pet-order.outputs.orderId
      placedOrderStatus: $steps.place-pet-order.outputs.orderStatus

  - workflowId: retrieve-cookie-and-eat-cookie
    summary: Retrieve cookie by an identifier and eat it
    description: This workflow lays out the steps to retrieve a cookie and then eat it.
    inputs:
      $ref: '#/components/inputs/cookieIds'
    steps:
      - stepId: retrieve-cookie
        description: This step demonstrates the retrieval of a cookie step.
        operationPath: '{$sourceDescriptions.cookieApi.url}#/paths/~1cookies~1{id}/get'
        parameters:
          # parameters to inject into the findCookie operation (parameter name must be resolvable at the referenced operation and the value is determined using {expression} syntax)
          #          - name: id
          #            in: path
          #            value: '$inputs.cookieId'
          - reference: $components.parameters.cookieId
#            value: '117'
        #          - reference: $components.parameters.pageSize
        #            value: '50'
        successCriteria:
          # assertions to determine step was successful
          - condition: $statusCode == 200
          - context: $response.body
            condition: '#/name == Chocolate'
            type: jsonpath
            version: draft-goessner-dispatch-jsonpath-00
          - context: $response.body
            condition: $.id == $inputs.cookieId
            type: jsonpath
            version: draft-goessner-dispatch-jsonpath-00
          - context: "<root><id>4711</id><name>Chocolate</name></root>"
            condition: '/root/id = 4711'
            type: xpath
            version: xpath-30
          - context: $statusCode
            condition: '^200$'
            type: regex
        onSuccess:
          - reference: $components.successActions.gotoEatCookie
        onFailure:
          - reference: $components.failureActions.retryFail
        outputs:
          # outputs from this step
          cookieDto: $response.body
          requestedCookieId: $request.path.id

      - stepId: retrieve-non-existing-cookie
        description: lorem
        operationPath: '{$sourceDescriptions.cookieApi.url}#/paths/~1cookies~1{id}/get'
        parameters:
          - reference: $components.parameters.cookieId
            value: '117'
        successCriteria:
          # assertions to determine step was successful
          - condition: $statusCode == 404
          - condition: $response.body == null
      - stepId: eat-cookie
        description: Eat a cookie identified by its id.
        operationPath: '{$sourceDescriptions.cookieApi.url}#/paths/~1cookies~1{id}~1eat/post'
        #operationId: eatCookie
        parameters:
          - name: id
            in: path
            value: $inputs.cookieId
        successCriteria:
          # assertions to determine step was successful
          - context: $response.header.location
            condition: '^/cookies/4711/eat$'
            type: regex
          - condition: $response.header.location != null
          - condition: $response.body == null
    outputs:
      # outputs from this wf
      cookieDto: $steps.retrieve-cookie.outputs.cookieDto
      requestedCookieId: $steps.retrieve-cookie.outputs.requestedCookieId

components:
  inputs:
    pets:
      type: object
      properties:
        petId:
          type: number
#        outputTestFromAnotherWorkflow:
#          hugo: $workflows.retrieve-cookie-and-eat-cookie.outputs.cookieDto
#          hugo2: $workflows.retrieve-cookie-and-eat-cookie.outputs.requestedCookieId
    cookieIds:
      type: object
      properties:
        cookieId:
          type: number
        cookieIdWhichDoesNotExist:
          type: number
  parameters:
    cookieId:
      name: id
      in: path
      value: $inputs.cookieId
    orderId:
      name: orderId
      in: path
      value: $steps.place-pet-order.outputs.orderId
#      value: $workflows.retrieve-cookie-and-eat-cookie.outputs.requestedCookieId
  successActions:
    gotoEatCookie:
      name: successRetrieveCookieAndEatCookieAndEnd
      type: goto
      stepId: eat-cookie
      criteria:
        # assertions to determine if this action should be executed
        - condition: $statusCode == 200
  failureActions:
    retryFail:
      name: retryRetrieveCookieAndEatCookieFiveTimes
      type: retry
      retryAfter: 1 # seconds
      retryLimit: 5
      stepId: eat-cookie
      criteria:
        # assertions to determine if this action should be executed
        - condition: $statusCode == 404
#    page:
#      name: page
#      in: query
#      value: 1
#    pageSize:
#      name: pageSize
#      in: query
#      value: 100